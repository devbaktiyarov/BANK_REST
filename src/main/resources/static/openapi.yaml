openapi: 3.1.0
info:
  title: Bank REST API
  version: 1.0.0
  description: |
    REST API для управления банковскими картами, пользователями и переводами.
    
    В API используется аутентификация по JWT (Bearer). Для административных операций
    требуется роль администратора. Все запросы и ответы в формате JSON.
servers:
  - url: http://localhost:8080
    description: Локальный сервер
tags:
  - name: Auth
    description: Аутентификация и управление токенами
  - name: Registration
    description: Регистрация новых пользователей
  - name: Cards
    description: Управление банковскими картами
  - name: Users
    description: Управление пользователями (администратор)
  - name: Transfers
    description: Денежные переводы между картами
paths:
  /v1/api/sign-up:
    post:
      tags: [Registration]
      summary: Регистрация нового пользователя
      description: Создаёт нового пользователя и возвращает пару JWT токенов (access/refresh).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequestDto'
      responses:
        '200':
          description: Пара JWT токенов успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtTokenPairDto'
        '400':
          description: Ошибка валидации входных данных
  /v1/api/sign-in:
    post:
      tags: [Auth]
      summary: Вход и получение JWT токенов
      description: Проверяет учётные данные и возвращает пару JWT токенов.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestDto'
      responses:
        '200':
          description: Успешная аутентификация, возвращена пара JWT токенов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtTokenPairDto'
        '400':
          description: Ошибка валидации
        '401':
          description: Неверный email или пароль
  /v1/api/refresh:
    post:
      tags: [Auth]
      summary: Обновление JWT токенов
      description: Принимает refresh-токен и возвращает новую пару токенов.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshJwtTokenDto'
      responses:
        '200':
          description: Новая пара JWT токенов выдана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtTokenPairDto'
        '400':
          description: Ошибка валидации
        '401':
          description: Недействительный или просроченный refresh-токен
  /v1/api/cards:
    post:
      tags: [Cards]
      summary: Создать карту (администратор)
      description: Администратор создаёт новую карту для пользователя.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreationRequestDto'
      responses:
        '201':
          description: Карта создана
          headers:
            Location:
              description: URI созданного ресурса
              schema:
                type: string
        '400':
          description: Ошибка валидации
        '401':
          description: Неавторизовано
        '403':
          description: Недостаточно прав (требуется администратор)
    get:
      tags: [Cards]
      summary: Получить список всех карт (администратор)
      description: Возвращает постраничный список карт. Доступно только администратору.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
        - in: query
          name: sort
          schema:
            type: string
            example: id,asc
      responses:
        '200':
          description: Страница с картами
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDto'
        '401':
          description: Неавторизовано
        '403':
          description: Недостаточно прав (требуется администратор)
  /v1/api/cards/{id}:
    get:
      tags: [Cards]
      summary: Получить карту по идентификатору
      description: Возвращает детальную информацию о карте по её ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '404':
          description: Карта не найдена
    delete:
      tags: [Cards]
      summary: Удалить карту (администратор)
      description: Удаляет карту по ID. Доступно только администратору.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Карта удалена
        '401':
          description: Неавторизовано
        '403':
          description: Недостаточно прав (требуется администратор)
        '404':
          description: Карта не найдена
  /v1/api/cards/my:
    get:
      tags: [Cards]
      summary: Получить карты текущего пользователя
      description: Возвращает постраничный список карт, принадлежащих аутентифицированному пользователю.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
        - in: query
          name: sort
          schema:
            type: string
            example: id,asc
      responses:
        '200':
          description: Страница с картами пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDto'
        '401':
          description: Неавторизовано
  /v1/api/cards/my/{id}:
    get:
      tags: [Cards]
      summary: Получить карту пользователя по идентификатору
      description: Возвращает карту, принадлежащую текущему пользователю, по её ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '401':
          description: Неавторизовано
        '404':
          description: Карта не найдена или не принадлежит пользователю
  /v1/api/cards/{id}/status:
    post:
      tags: [Cards]
      summary: Установить статус карты (администратор)
      description: Изменяет статус карты (например, ACTIVE/BLOCKED). Доступно только администратору.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardStatusRequestDto'
      responses:
        '204':
          description: Статус обновлён
        '400':
          description: Ошибка валидации
        '401':
          description: Неавторизовано
        '403':
          description: Недостаточно прав (требуется администратор)
        '404':
          description: Карта не найдена
  /v1/api/cards/{id}/add:
    post:
      tags: [Cards]
      summary: Пополнить баланс карты (администратор)
      description: Увеличивает баланс карты на указанную сумму. Доступно только администратору.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardAmountDto'
      responses:
        '204':
          description: Средства добавлены
        '400':
          description: Ошибка валидации
        '401':
          description: Неавторизовано
        '403':
          description: Недостаточно прав (требуется администратор)
        '404':
          description: Карта не найдена
  /v1/api/users:
    get:
      tags: [Users]
      summary: Получить список пользователей (администратор)
      description: Возвращает постраничный список пользователей. Доступно только администратору.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
        - in: query
          name: sort
          schema:
            type: string
            example: id,asc
      responses:
        '200':
          description: Страница с пользователями
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUserDto'
        '401':
          description: Неавторизовано
        '403':
          description: Недостаточно прав (требуется администратор)
  /v1/api/transfers/own:
    post:
      tags: [Transfers]
      summary: Перевод между собственными картами пользователя
      description: Создаёт перевод средств между картами, принадлежащими текущему пользователю.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequestDto'
      responses:
        '200':
          description: Перевод успешно выполнен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDto'
        '400':
          description: Ошибка валидации (например, некорректные идентификаторы карт или сумма)
        '401':
          description: Неавторизовано
        '404':
          description: Карта не найдена или не принадлежит пользователю
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegistrationRequestDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          description: Электронная почта пользователя
        password:
          type: string
          minLength: 4
          maxLength: 50
          description: Пароль пользователя (4–50 символов)
    AuthenticationRequestDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          description: Электронная почта
        password:
          type: string
          minLength: 4
          maxLength: 50
          description: Пароль
    RefreshJwtTokenDto:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string
          description: Действующий refresh-токен
    JwtTokenPairDto:
      type: object
      properties:
        accessToken:
          type: string
          description: Короткоживущий токен доступа (Bearer)
        refreshToken:
          type: string
          description: Долгоживущий токен для обновления пары токенов
    CardCreationRequestDto:
      type: object
      required: [cardNumber, ownerName, expiry, userId]
      properties:
        cardNumber:
          type: string
          pattern: "^\\d{16}$"
          description: Номер карты из 16 цифр без пробелов
        ownerName:
          type: string
          minLength: 2
          maxLength: 50
          description: Имя и фамилия владельца карты
        expiry:
          type: string
          description: Year and month, e.g. 2027-12
          pattern: "^\\d{4}-\\d{2}$"
          examples: ["2027-12"]
        userId:
          type: integer
          format: int64
          minimum: 1
          description: Идентификатор пользователя, которому принадлежит карта
    CardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cardNumber:
          type: string
          description: Номер карты
        ownerName:
          type: string
          description: Владелец карты
        expiry:
          type: string
          description: Год и месяц окончания действия, например 2027-12
          pattern: "^\\d{4}-\\d{2}$"
        status:
          type: string
          description: Статус карты (ACTIVE, BLOCKED и т. п.)
        balance:
          type: number
          format: double
          description: Текущий баланс карты
        userId:
          type: integer
          format: int64
          description: Идентификатор владельца карты
    CardStatusRequestDto:
      type: object
      required: [status]
      properties:
        status:
          type: string
          description: Новый статус карты
          example: ACTIVE
    CardAmountDto:
      type: object
      required: [amount]
      properties:
        amount:
          type: number
          format: double
          minimum: 0.01
          description: Сумма пополнения (> 0)
    TransferRequestDto:
      type: object
      required: [fromCardId, toCardId, amount]
      properties:
        fromCardId:
          type: integer
          format: int64
          minimum: 1
          description: Идентификатор карты-источника
        toCardId:
          type: integer
          format: int64
          minimum: 1
          description: Идентификатор карты-получателя
        amount:
          type: number
          format: double
          minimum: 0.01
          description: Сумма перевода (> 0)
    TransferDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromCardId:
          type: integer
          format: int64
          description: Карта-источник
        toCardId:
          type: integer
          format: int64
          description: Карта-получатель
        amount:
          type: number
          format: double
          description: Переведённая сумма
        createdAt:
          type: string
          format: date-time
          description: Время создания перевода (UTC)
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
          description: Электронная почта пользователя
        role:
          type: string
          description: Роль пользователя (например, ROLE_USER, ROLE_ADMIN)
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
    PageCardDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDto'
        pageable:
          nullable: true
        last:
          type: boolean
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
        sort:
          nullable: true
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean
    PageUserDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        pageable:
          nullable: true
        last:
          type: boolean
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
        sort:
          nullable: true
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean

